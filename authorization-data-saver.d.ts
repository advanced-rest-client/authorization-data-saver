/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   authorization-data-saver.html
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

/// <reference path="../polymer/types/polymer-element.d.ts" />
/// <reference path="../auth-dialogs/auth-dialogs.d.ts" />
/// <reference path="../headers-parser-behavior/headers-parser-behavior.d.ts" />

declare namespace LogicElements {

  /**
   * An element responsible for applying authorization data to the request
   * before sending it to a server and requesting credentials data from the user.
   * It contains UI dialogs to request data from the user for Basic and NTLM
   * authorization. It listens for `before-request` and `response-ready` events
   * as defined
   * [in this issue](https://github.com/jarrodek/ChromeRestClient/issues/1010).
   *
   * The element's API is based on custom events fired by the request editor
   * (controller). There's no need to directly call any function or set a
   * property. It adds event listeners to the `window` object. It should be
   * placed as close to the `<body>` as possible.
   *
   * The `before-request` event is handled synchronously.
   *
   * ### Styling
   *
   * See [auth-dialogs](https://github.com/advanced-rest-client/auth-dialogs) for styling options.
   *
   * ### Demo
   *
   * See [auth-dialogs](https://github.com/advanced-rest-client/auth-dialogs) for dialogs demos.
   */
  class AuthorizationDataSaver extends
    ArcBehaviors.HeadersParserBehavior(
    Object) {

    /**
     * Reference to currently opened dialog
     */
    readonly dialog: HTMLElement|null;

    /**
     * URL of the request related to current operation.
     */
    url: string|null|undefined;

    /**
     * Cashed list of authorization data for current session.
     * It is here so the element won't ask data store for data that already has been received.
     */
    _cache: any[]|null|undefined;

    /**
     * Currently opened dialog name.
     */
    _openedDialog: string|null|undefined;
    connectedCallback(): void;
    disconnectedCallback(): void;

    /**
     * Handler for the ARC's event `before-request`.
     * The event will be handled synchronously.
     */
    _beforeRequestHandler(e: any): void;

    /**
     * Processes request before it's send to the transport library.
     * It sets
     * To mimic browser behavior the authorization data won't be set unless at least once in the
     * session the user has set authorization data for current URL.
     *
     * @param request The ArcRequest object
     */
    processRequest(request: object|null): void;

    /**
     * Applies the basic authorization data to the request.
     *
     * If the header value have changed then it fires `request-headers-changed` custom event.
     * It sets computed value of the readers to the event's detail object.
     *
     * @param request The event's detail object. Changes made here will be propagated to
     * the event.
     * @param data The authorization data to apply.
     */
    _applyRequestBasicAuthData(request: object|null, data: object|null): void;

    /**
     * Applies the NTLM authorization data to the request.
     *
     * Because NTLM requires certain operations on a socket it's bot just about setting a headers
     * but whole NTLM configuration object.
     *
     * Applied the `auth` object to the event's `detail.auth` object.
     *
     * @param request The event's detail object. Changes made here will be propagated to
     * the event.
     * @param values The authorization data to apply.
     */
    _applyRequestNtlmAuthData(request: object|null, values: object|null): void;

    /**
     * Handler to the `response-ready` event
     */
    _afterRequestHandler(e: any): void;

    /**
     * Checks if the response require authorization and if so it returns the authorization
     * method name for the endpoint.
     *
     * @param response The response object associated with the request
     * @returns Authorization method or undefined if not found or not supported.
     */
    authorizationMethodFromResponse(response: Response|null): String|null|undefined;

    /**
     * Checks response object for any auth request.
     * If authorization is required for the endpoint it will display corresponding dialog if
     * supported.
     *
     * This function shouldn't interrupt normal response flow. Id will display authorization
     * dialog if required and when the user accept the dialog it fires the `resend-auth-request`
     * custom event.
     *
     * This function exists quietly if any of the arguments are not set.
     *
     * @param method Authorization method
     * @param request The request object.
     * @param id Request ID
     */
    _processAuthResponse(method: String|null, request: Request|null, id: String|null): void;

    /**
     * Opens a basic authorization dialog when response status is 401 and basic or digest
     * authorization is required.
     */
    _openBasicAuthDialog(url: any): void;

    /**
     * Opens the NTLM authorization dialog when response status is 401 and NTLM authorization
     * is required.
     */
    _openNtlmAuthDialog(url: any): void;

    /**
     * Restores the database object entry or cached object if any.
     *
     * @param url The URL of the request
     * @param authMethod The Authorization method to restore data for.
     */
    _restoreDialogData(url: String|null, authMethod: String|null): void;

    /**
     * Finds an auth data for given `url`.
     *
     * @param type Authorization type.
     * @param url The URL of the request.
     * @returns Auth data if exists in the cache.
     */
    _findCachedAuthData(type: String|null, url: String|null): object|null|undefined;

    /**
     * Sends authorization data to the cache.
     *
     * @param type Authorization type.
     * @param url current request URL
     * @param data Authorization data to store.
     */
    _cacheAuthData(type: String|null, url: String|null, data: object|null): void;

    /**
     * Called when stored authorization data has been found in database or cache.
     * It updates the data in opened dialog.
     */
    _setRestoredAuthData(authMethod: any, doc: any): void;

    /**
     * Restore stored data to basic auth dialog.
     *
     * @param doc Stored authorization data.
     */
    _restoreBasicData(doc: object|null): void;

    /**
     * Restore stored data to NTLM auth dialog.
     *
     * @param doc Stored authorization data.
     */
    _restoreNtlmData(doc: object|null): void;

    /**
     * Removes query parameters and the fragment part from the URL
     *
     * @param url URL to process
     * @returns Canonical URL.
     */
    _computeUrlPath(url: String|null): String|null;

    /**
     * Called when the authorization dialog has been closed.
     */
    _onAuthDialogResult(e: CustomEvent|null): void;

    /**
     * Sets the NTLM authorization data and sends the `ntlm-data-changed` event so the request
     * editor can attach it to the next request.
     *
     * @param values Map with values from dialog event.
     * @param id Request ID
     */
    _setNtlmAuthData(values: object|null, id: String|null): void;

    /**
     * Sets the basic authorization data in the `headers` property or in headers in the `request`
     * object if provided.
     *
     * @param values Map with values from dialog event.
     * @param id Request ID
     */
    _setBasicAuthData(values: object|null, id: String|null): void;

    /**
     * Sends an event about sending request with auth data.
     *
     * @param id Request ID
     */
    _resendRequest(id: String|null): void;

    /**
     * Stores the data in the datastore.
     */
    _storeAuthData(authMethod: any, authData: any): void;
  }
}

interface HTMLElementTagNameMap {
  "authorization-data-saver": LogicElements.AuthorizationDataSaver;
}
